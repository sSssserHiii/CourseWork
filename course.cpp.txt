#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Person {
protected:
    string FullName;
    string DayMonthYear;
    double Height;
    double Weight;
    bool Gender;
    string PhoneNumber;
    string Email;
public:
    Person() {
        FullName = "NONE";
        DayMonthYear = "NONE";
        Height = 0;
        Weight = 0;
        Gender = 1;
        PhoneNumber = "NONE";
        Email = "NONE";
    }
    Person(string FullName, string DayMonthYear, double Height, double Weight, bool Gender, string PhoneNumber, string Email) {
        this->FullName = FullName;
        this->DayMonthYear = DayMonthYear;
        this->Height = Height;
        this->Weight = Weight;
        this->Gender = Gender;
        this->PhoneNumber = PhoneNumber;
        this->Email = Email;    
        Error(Weight, Height);

    }
    bool Error(double& Weight, double& Height) {
      
      if (Weight <= 23 and Weight >= 400) {
        throw invalid_argument("Weight is over the range");
      }
      else{
        return 1;
      }
      if(Height <= 50 and Height >= 290){
        throw  invalid_argument("Height is over the range");
      }
      else {
        return 1;
      }
    }
    friend bool IsWeight(double& Weight);
    friend bool IsHeight(double& Height);
    bool IsWeight(double& Weight){
        return Weight > 80;  
    }
    bool IsHeight(double& Heihgt){
        return Height > 150;
    }
     void changeEmail(string NewEmail) {
         cin >> NewEmail;
         Email = NewEmail;
     }
     void changePhoneNum(string NewPhone) {
         cin >> NewPhone;
         PhoneNumber = NewPhone;
     }
     friend ostream& operator<<(ostream& Os, Person & person){
      cout << "Name: " << person.FullName << "\n";
      cout << "Date of birth: "<< person.DayMonthYear << "\n";
      cout << "Height: " << person.Height << "\n";
      cout << "Weight: " << person.Weight << "\n";
      cout << "Gender: " << person.Gender << "\n";
      cout << "Phone number: " << person.PhoneNumber << "\n";
      cout << "Email: " << person.Email << "\n";
      //IsWeight(Weight);
      //IsHeight(Height);
     return Os;
     }
};
class Teacher : public Person{
  private:
    bool Experience;
    string Category;
    int Salary;
  public:
    Teacher() : Person(){
      Experience = 0;
      Category = "NONE";
      Salary = 0;
    }
    Teacher(string FullName, string DayMonthYear, double Height, double Weight, bool Gender, string PhoneNumber, string Email, bool Experience, string Category, int Salary) : Person( FullName, DayMonthYear, Height, Weight, Gender, PhoneNumber, Email) {
      this-> Experience = Experience;
      this-> Category = Category;
      this-> Salary = Salary;

    }
    void SalaryCounting(){
      int CountingValue = 0;
      int Surprise;
      if (Experience == true){
        Surprise = 200;
      }
      CountingValue = Salary + int(1) + Surprise;
      //return 0;
      cout << CountingValue;
    }
    int  VacationCounting(int NumberOfDays){
      int ValueVacation = 0;
      ValueVacation = (Salary/(NumberOfDays*30));
      return ValueVacation;
    }
    friend ostream& operator<<(ostream& Os, Teacher & teacher){
      cout << "Experience: " << teacher.Experience << "\n";
      cout << "Category: "<< teacher.Category << "\n";
      cout << "Salary: " << teacher.Salary << "\n";
      return Os;
    }
};
class Performer : public Person{
  private:
    string Genre;
    int QuantityOfPerfomances;
  public:
    Performer() : Person(){
      Genre = "NONE";
      QuantityOfPerfomances = 0;
    }
    Performer(string FullName, string DayMonthYear, double Height, double Weight, bool Gender, string PhoneNumber, string Email, string Genre, int QuantityOfPerfomances) : Person( FullName, DayMonthYear, Height, Weight, Gender, PhoneNumber, Email) {
      this-> Genre = Genre;
      this-> QuantityOfPerfomances = QuantityOfPerfomances;
    }
    void AddPerfomance(const int PerfomanceValue = 1){
      QuantityOfPerfomances += PerfomanceValue;
    }
    void ChangeGenre(string AddGenre){
      cin >> AddGenre;
      Genre = AddGenre;
    }
    friend ostream& operator<<(ostream& Os, Performer & performer){
      cout << "Genre: " << performer.Genre << "\n";
      cout << "Quantity of perfomances: "<< performer.QuantityOfPerfomances << "\n";
     return Os;
    }
};

  //void ReturnTheSupremeTeachersSalary(vector<Teacher> TeachersDynamicArray){
    //int SupremeSalaryFinder = 0;
    /*for (int i = 0; i < TeachersDynamicArray.size(); i++){
      if (){

      }
    }*/
    //sort(TeachersDynamicArray.begin(),TeachersDynamicArray.end(), //TeachersDynamicArray.Salary());
  //}
  void StreamlineTheTeachersExperience(vector<Teacher> TeachersDynamicArray){

  }
  void CoutPerfomancersOfTackingGener(vector<Performer> PerformersDynamicArray, string ChoosenGener){

  }
  void AddPerfomance(vector<Performer> PerformersDynamicArray){

  }
int main(){
     //Person APerson( "John McField"   , "10/08/02", 111, 75 , 1, "077743433" , "email@gmail.com");
     Teacher * ATeacherArray;
     Performer * APerformerArray;
     string NamesOfEmp, DateOfTheirBirth, PhoneNums, Emails, TCategory, PGenre;
     int TeachSalary, PerfQuantOfPerfomances;
     double TheirHeight, TheirWeight;
     bool TheirGender, ExperienceExist;
     int SelectedChoice;
    cout << "$ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $"<<endl;
        cout << "***********************************************************************"<< endl;
    cout << "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !"<< endl;
    cout << "There are some operations under the perfomances and teachers data.\nProgramm will continue run till ZERO is pressed.\nSelect the presented offers down below: "<< endl;
    cout << "! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !"<< endl;
  do{
    cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"<<endl;
    cout << "Add teacher's data -> 1" << endl;
    cout << "Add performer data  -> 2" << endl;
    cout << "Count teachers salary -> 3 (Only for teachers)" << endl;
    cout << "Count teachers vacation -> 4 (Only for teachers)" << endl;
    cout << "Change genre -> 5 (Only for perfomancers)" << endl;
    cout << "Change number -> 6" << endl;
    cout << "Change Email -> 7" << endl;
    cout << "Check weight and height -> 8" << endl;
     cout << "Return all data -> 9" << endl;
    cout << "Return perfomancers data -> 10" << endl;
    cout << "Return teachers data -> 11" << endl;
    cout << "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"<<endl;
    cout << "Enter your choice: ";
    cin >> SelectedChoice;
    cout << endl;
    switch(SelectedChoice){
      case 1:
        cout<<"Entering Teachers data: "<<endl;
        cout <<"Name: ";
        cin >> NamesOfEmp;
        cout << endl;
        cout <<"Day month and year of birth: ";
        cin >> DateOfTheirBirth;
        cout << endl;
        cout << "Heihgt: ";
        cin >> TheirHeight;
        cout << endl;
        cout << "TheirWeight: ";
        cin >> TheirWeight;
        cout << endl;
        cout << "TheirGender: ";
        cin >> TheirGender;
        cout << endl;
        cout <<"Phonenumber: ";
        cin >> PhoneNums;
        cout << endl;
        cout << "Email: ";
        cin >> Emails;
        cout << endl;
        cout << "Experience: ";
        cin >> ExperienceExist;
        cout << endl;  
        cout << "TCategory: ";
        cin >> TCategory;
        cout << endl;
        cout << "Salary: ";
        cin >> TeachSalary;
        cout << endl;  
        ATeacherArray = new Teacher(NamesOfEmp, DateOfTheirBirth, TheirHeight, TheirWeight, TheirGender, PhoneNums, Emails, ExperienceExist, TCategory, TeachSalary);
        break;
      case 2:
      cout<<"Entering performers data: "<<endl;
        cout <<"Name: ";
        cin >> NamesOfEmp;
        cout << endl;
        cout <<"Day month and year of birth: ";
        cin >> DateOfTheirBirth;
        cout << endl;
        cout << "Heihgt: ";
        cin >> TheirHeight;
        cout << endl;
        cout << "TheirWeight: ";
        cin >> TheirWeight;
        cout << endl;
        cout << "TheirGender: ";
        cin >> TheirGender;
        cout << endl;
        cout <<"Phonenumber: ";
        cin >> PhoneNums;
        cout << endl;
        cout << "Email: ";
        cin >> Emails;
        cout << endl;
        cout << "Genre: ";
        cin >> PGenre;
        cout << endl;
        cout << "Quantity of perfomances: ";
        cin >> PerfQuantOfPerfomances;
        cout << endl;
        APerformerArray = new Performer(NamesOfEmp, DateOfTheirBirth, TheirHeight, TheirWeight, TheirGender, PhoneNums, Emails, PGenre, PerfQuantOfPerfomances);
        break;
      //case 3:
      //case 4:
      //case 5:
      //case 6:
      //case 7:
      //case 8:
      //case 9:
       //cout << ATeacherArray;
      //case 10:
      case 11:
        cout << ATeacherArray;
        break;
      default:
        cout << SelectedChoice << "is not a valid menu item.\n";
        cout << endl;
    }
  }while(SelectedChoice != 0);
  cout <<"The end of process"<<endl; 
  cout << "***********************************************************************"<< endl;
  cout << "$ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $"<<endl;
  return 0 ;
}
